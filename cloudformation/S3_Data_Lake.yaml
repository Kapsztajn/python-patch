AWSTemplateFormatVersion: 2010-09-09
Description: Pinpoint Event Processing

Parameters:

  PinpointProjectId:
    Type: String
    Description: Amazon Pinpoint Project ID if one already exists, blank to create one
  PinpointProjectName:
    Type: String
    Default: "My Pinpoint Project"
    Description: "If no PinpointProjectId provided, name to be used to create the Pinpoint project"
  ConfigurationSetName:
    Type: String
    Description: Name of the SES Configuration Set to create
  EventS3BucketName:
    Type: String
    Description: Name of the S3 bucket to create to contain the Pinpoint events - must be unique!
  EventAthenaDatabaseName:
    Type: String
    Description: Name of the Athena database created in Glue
    Default: "due_eventdb"

Conditions:
  NeedsPinpointProjectId: !Equals
      - ''
      - !Ref PinpointProjectId

Resources:
  PinpointProject:
    Type: AWS::Pinpoint::App
    Condition: NeedsPinpointProjectId
    Properties:
      Name: !Ref PinpointProjectName


  ##### S3 BUCKETS
  #######################################

  DataS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: Not public facing.
    Properties:
      BucketName: !Ref EventS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: pinpoint-event-processing/


  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This is the log bucket.
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:GetBucketAcl"
          Resource: !Sub arn:aws:s3:::${LogBucket}
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: "s3:PutObject"
          Resource: !Sub arn:aws:s3:::${LogBucket}/AWSLogs/${AWS::AccountId}/*
          Condition:
            StringEquals:
              "s3:x-amz-acl": "bucket-owner-full-control"

##### SES Configuration
#######################################

  ConfigSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Ref ConfigurationSetName

  #### KINESIS FIREHOSE - Pinpoint
  #######################################
  PinpointEventStream:
    Type: AWS::Pinpoint::EventStream
    Properties:
      ApplicationId: !If
        - NeedsPinpointProjectId
        - !Ref PinpointProject
        - !Ref PinpointProjectId
      DestinationStreamArn: !GetAtt PinpointEventFirehose.Arn
      RoleArn: !GetAtt PinpointKinesisStreamRole.Arn

  PinpointEventFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: "DirectPut"
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub "arn:aws:s3:::${DataS3Bucket}"
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        CompressionFormat: "UNCOMPRESSED"
        Prefix: "events/"
        RoleARN: !GetAtt PinpointKinesisFirehoseRole.Arn
        ProcessingConfiguration:
          Enabled: TRUE
          Processors:
            -
              Parameters:
                -
                  ParameterName: "LambdaArn"
                  ParameterValue: !GetAtt FirehoseRecordConversionLambda.Arn
                -
                  ParameterName: "BufferIntervalInSeconds"
                  ParameterValue: 60
                -
                  ParameterName: "BufferSizeInMBs"
                  ParameterValue: 3
                -
                  ParameterName: "NumberOfRetries"
                  ParameterValue: 3
                -
                  ParameterName: "RoleArn"
                  ParameterValue: !GetAtt PinpointKinesisFirehoseRole.Arn
              Type: "Lambda"

  FirehoseRecordConversionLambda:
    Type: AWS::Lambda::Function
    Properties:
        Handler: index.handler
        Role: !GetAtt FirehoseRecordConversionLambdaRole.Arn
        Runtime: "nodejs12.x"
        Timeout: 60
        Code:
          ZipFile: |
            exports.handler = async (event) => {

              const output = [];

              event.records.forEach(record => {

                try {
                  // Decode the base64 message
                  const decoded = JSON.parse(Buffer.from(record.data, 'base64').toString('ascii'));

                  // Filter out Test Messages
                  if (decoded.event_type === '_test.event_stream') {
                    output.push({
                      data: record.data,
                      recordId: record.recordId,
                      result: 'Dropped'
                    });

                  } else {

                    output.push({
                      // Add a linebreak for easier athena parsing
                      data: Buffer.from(JSON.stringify(decoded) + '\n').toString('base64'),
                      recordId: record.recordId,
                      result: 'Ok'
                    });
                  }
                }
                catch(err) {
                  console.error('Encountered Error when processing Kinesis event record for RecordId: ' + record.recordId + ', error: ' + JSON.stringify(err));
                  output.push({
                    data: record.data,
                    recordId: record.recordId,
                    result: 'Dropped'
                  });
                }

              });

              return {records: output};
            };




  PinpointKinesisStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pinpoint.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "firehose:PutRecordBatch"
                  - "firehose:DescribeDeliveryStream"
                Resource: !GetAtt PinpointEventFirehose.Arn

  PinpointKinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${DataS3Bucket}*"
                  - !Sub "arn:aws:s3:::${DataS3Bucket}"
              -
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunctionConfiguration"
                Resource: !GetAtt FirehoseRecordConversionLambda.Arn
              -
                Effect: "Allow"
                Action: "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*:log-stream:*"

  FirehoseRecordConversionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"




  #### GLUE AND ATHENA
  #######################################
  PinpointEventDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref EventAthenaDatabaseName
        Description: "SES and Pinpoint Streaming Event Database"


  EventTableAllNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create a Table for All events"
      QueryString:
        !Sub
          |
            CREATE EXTERNAL TABLE IF NOT EXISTS `all_events` (
              event_type string,
              event_timestamp bigint,
              arrival_timestamp bigint,
              event_version string,
              application struct<app_id:string,sdk:map<string,string>>,
              client struct<client_id:string,cognito_id:string>,
              device struct<platform:map<string,string>>,
              session map<string,string>,
              attributes map<string,string>,
              client_context struct<custom:map<string,string>>,
              awsAccountId string,
              facets struct<
                email_channel:struct<
                  mail_event:struct<
                    mail:struct<
                      message_id:string,
                      message_send_timestamp:bigint,
                      from_address:string,
                      destination:array<string>,
                      headers_truncated:boolean,
                      headers:array<map<string,string>>,
                      common_headers:struct<
                        `from`:string,
                        to:array<string>,
                        subject:string
                      >
                    >,
                    send:map<string,string>,
                    delivery:struct<
                      smtp_response:string,
                      reporting_mta:string,
                      recipients:array<string>,
                      processing_time_millis:int
                    >,
                    `open`:struct<
                      `ip_address`:string,
                      `user_agent`:string
                    >,
                    `click`:struct<
                      `ip_address`:string,
                      `user_agent`:string,
                      `link`:string,
                      `link_tags`:struct<
                        `unsubscribeLinkTag`:array<string>
                      >
                    >,
                    reject:struct<
                      reason:string
                    >,
                    complaint:struct<
                      complained_recipients:array<struct<email_address:string>>,
                      feedback_id:string,
                      user_agent:string,
                      complaint_feedback_type:string
                    >,
                    `bounce`:struct<
                      bounce_type:string,
                      bounce_sub_type:string,
                      bounced_recipients:array<struct<email_address:string,`action`:string,`status`:string,diagnostic_code:string>>,
                      feedback_id:string,
                      reporting_mta:string
                    >,
                    reject:struct<reason:string>

                  >
                >
              >,
              metrics struct<price_in_millicents_usd:double>
            )
            ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
            WITH SERDEPROPERTIES (
            'serialization.format' = '1'
            ) LOCATION 's3://${DataS3Bucket}/events/'
            TBLPROPERTIES ('has_encrypted_data'='false');

  EventTableSendNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Send View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_send AS
            SELECT
                from_unixtime((event_timestamp / 1000)) event_timestamp
              , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
              , application.app_id application_id
              , client.client_id endpoint_id
              , attributes['campaign_id'] pinpoint_campaign_id
              , attributes['treament_id'] pinpoint_treatment_id
              , awsaccountid
              , facets.email_channel.mail_event.mail.message_id message_id
              , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
              , facets.email_channel.mail_event.mail.from_address from_address
              , facets.email_channel.mail_event.mail.destination destination
              , facets.email_channel.mail_event.mail.common_headers.subject as subject
              , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
              , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.send')


  EventTableHardBounceNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Hard Bounce View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_hardbounce AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.bounce.bounce_type as bounce_type
            , facets.email_channel.mail_event.bounce.bounce_sub_type as bounce_sub_type
            , facets.email_channel.mail_event.bounce.feedback_id as feedback_id
            , facets.email_channel.mail_event.bounce.reporting_mta as reporting_mta
            , bounced_recipient.email_address as bounced_recipient_email_address
            , bounced_recipient.action as bounced_recipient_action
            , bounced_recipient.status as bounced_recipient_status
            , bounced_recipient.diagnostic_code as bounced_recipient_diagnostic_code
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
              CROSS JOIN UNNEST(facets.email_channel.mail_event.bounce.bounced_recipients) as t(bounced_recipient)
            WHERE (event_type = '_email.hardbounce')

  EventTableSoftBounceNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Soft Bounce View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_softbounce AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.bounce.bounce_type as bounce_type
            , facets.email_channel.mail_event.bounce.bounce_sub_type as bounce_sub_type
            , facets.email_channel.mail_event.bounce.feedback_id as feedback_id
            , facets.email_channel.mail_event.bounce.reporting_mta as reporting_mta
            , bounced_recipient.email_address as bounced_recipient_email_address
            , bounced_recipient.action as bounced_recipient_action
            , bounced_recipient.status as bounced_recipient_status
            , bounced_recipient.diagnostic_code as bounced_recipient_diagnostic_code
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
              CROSS JOIN UNNEST(facets.email_channel.mail_event.bounce.bounced_recipients) as t(bounced_recipient)
            WHERE (event_type = '_email.softbounce')

  EventTableComplaintNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Complaint View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_complaint AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , complained_recipient.email_address as complained_email_address
            , facets.email_channel.mail_event.complaint.feedback_id as feedback_id
            , facets.email_channel.mail_event.complaint.user_agent as user_agent
            , facets.email_channel.mail_event.complaint.complaint_feedback_type as complaint_feedback_type
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
              CROSS JOIN UNNEST(facets.email_channel.mail_event.complaint.complained_recipients) as t(complained_recipient)
            WHERE (event_type = '_email.complaint')

  EventTableDeliveryNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Delivered View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_delivered AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.mail.common_headers.subject as subject
            , facets.email_channel.mail_event.delivery.smtp_response as smtp_response
            , facets.email_channel.mail_event.delivery.reporting_mta as reporting_mta
            , facets.email_channel.mail_event.delivery.recipients as recipients
            , facets.email_channel.mail_event.delivery.processing_time_millis as processing_time_millis
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.delivered')

  EventTableOpenNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Open View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_open AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.mail.common_headers.subject as subject
            , facets.email_channel.mail_event.open.ip_address as ip_address
            , facets.email_channel.mail_event.open.user_agent as user_agent
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.open')

  EventTableClickNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Click View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_click AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.mail.common_headers.subject as subject
            , facets.email_channel.mail_event.click.ip_address as ip_address
            , facets.email_channel.mail_event.click.user_agent as user_agent
            , facets.email_channel.mail_event.click.link as link
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.click')

  EventTableUnsubNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Unsub View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_unsubscribe AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.mail.common_headers.subject as subject
            , facets.email_channel.mail_event.click.ip_address as ip_address
            , facets.email_channel.mail_event.click.user_agent as user_agent
            , facets.email_channel.mail_event.click.link as link
            , facets.email_channel.mail_event.click.link_tags.unsubscribeLinkTag
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.unsubscribe')

  EventTableRejectNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Email Reject View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW email_rejected AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , facets.email_channel.mail_event.mail.message_id message_id
            , from_unixtime((facets.email_channel.mail_event.mail.message_send_timestamp / 1000)) message_send_timestamp
            , facets.email_channel.mail_event.mail.from_address from_address
            , facets.email_channel.mail_event.mail.destination destination
            , facets.email_channel.mail_event.mail.common_headers.subject as subject
            , facets.email_channel.mail_event.reject.reason as reject_reason
            , MAP_CONCAT(COALESCE(client_context.custom, CAST(JSON '{}' AS MAP(varchar,varchar))),  attributes) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_email.rejected')

  EventTableSMSBufferedNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the SMS Buffered View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW sms_buffered AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , attributes['sender_request_id'] as sender_request_id
            , attributes['destination_phone_number'] as destination_phone_number
            , attributes['record_status'] as record_status
            , attributes['iso_country_code'] as iso_country_code
            , attributes['number_of_message_parts'] as number_of_message_parts
            , attributes['message_id'] as message_id
            , attributes['message_type'] as message_type
            , metrics.price_in_millicents_usd as price_in_millicents_usd
            , CAST(JSON_PARSE(attributes['customer_context']) AS MAP(VARCHAR, VARCHAR)) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_SMS.BUFFERED')

  EventTableSMSSuccessNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the SMS Success View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW sms_success AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , attributes['sender_request_id'] as sender_request_id
            , attributes['destination_phone_number'] as destination_phone_number
            , attributes['record_status'] as record_status
            , attributes['iso_country_code'] as iso_country_code
            , attributes['number_of_message_parts'] as number_of_message_parts
            , attributes['message_id'] as message_id
            , attributes['message_type'] as message_type
            , attributes['origination_phone_number'] as origination_phone_number
            , metrics.price_in_millicents_usd as price_in_millicents_usd
            , CAST(JSON_PARSE(attributes['customer_context']) AS MAP(VARCHAR, VARCHAR)) as context
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_SMS.SUCCESS')

  EventTableCampaignSendNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Campaign Send View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW campaign_send AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['campaign_id'] pinpoint_campaign_id
            , attributes['treament_id'] pinpoint_treatment_id
            , awsaccountid
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_campaign.send')

  EventTableJourneySendNamedQuery:
    Type: AWS::Athena::NamedQuery
    DeletionPolicy: Delete
    Properties:
      Database: !Ref PinpointEventDatabase
      Description: "Create the Journey Send View"
      QueryString:
        !Sub
          |
            CREATE OR REPLACE VIEW journey_send AS
            SELECT
              from_unixtime((event_timestamp / 1000)) event_timestamp
            , from_unixtime((arrival_timestamp / 1000)) arrival_timestamp
            , application.app_id application_id
            , client.client_id endpoint_id
            , attributes['journey_run_id'] journey_run_id
            , attributes['journey_send_status'] journey_send_status
            , attributes['journey_id'] journey_id
            , attributes['journey_activity_id'] journey_activity_id
            , awsaccountid
            , attributes as attributes_map
            FROM
              all_events
            WHERE (event_type = '_journey.send')

  ### Deployment Helper
  SetupSampleFiles:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceHelper.Arn
      CustomResourceAction: SetupSampleFiles

  CustomResourceHelper:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          S3_DATA_BUCKET: !Ref DataS3Bucket
          CONFIG_SET_NAME: !Ref ConfigurationSetName
          ALL_EVENT_TABLE: !Ref EventTableAllNamedQuery
          SEND_NQ: !Ref EventTableSendNamedQuery
          HARD_BOUNCE_NQ: !Ref EventTableHardBounceNamedQuery
          SOFT_BOUNCE_NQ: !Ref EventTableSoftBounceNamedQuery
          COMPLAINT_NQ: !Ref EventTableComplaintNamedQuery
          DELIVERY_NQ: !Ref EventTableDeliveryNamedQuery
          OPEN_NQ: !Ref EventTableOpenNamedQuery
          CLICK_NQ: !Ref EventTableClickNamedQuery
          UNSUB_NQ: !Ref EventTableUnsubNamedQuery
          REJECT_NQ: !Ref EventTableRejectNamedQuery
          SMS_BUFF_NQ: !Ref EventTableSMSBufferedNamedQuery
          SMS_SUCCESS_NQ: !Ref EventTableSMSSuccessNamedQuery
          CAMPAIGN_SEND_NQ: !Ref EventTableCampaignSendNamedQuery
          JOURNEY_SEND_NQ: !Ref EventTableJourneySendNamedQuery
          PINPOINT_PROJECT_ARN: !Sub
            - 'arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:apps/${ProjectId}'
            - {ProjectId: !If [NeedsPinpointProjectId, !Ref PinpointProject, !Ref PinpointProjectId] }
      Description: Helps set up the Optimize Amazon Personalize Campaigns using Amazon Pinpoint Events solution.
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt CustomResourceHelperRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const https = require("https");
          const url = require('url');
          const p = process.env;
          AWS.config.update({
            region: p.AWS_REGION
          });

          const athena = new AWS.Athena();
          const sesv2 = new AWS.SESV2();

          const rnq = function(namedQueries) {
          console.log(namedQueries);
          return athena.batchGetNamedQuery({NamedQueryIds: namedQueries}).promise()
            .then((data) => {

              return data.NamedQueries.reduce((pr, q) => {

                const params = {
                  QueryString: q.QueryString,
                  QueryExecutionContext: {
                    Database: q.Database
                  },
                  ResultConfiguration: {
                    OutputLocation: `s3://${p.S3_DATA_BUCKET}/temp/`
                  }
                };
                return pr.then(() => athena.startQueryExecution(params).promise());
              }, Promise.resolve());

            });
          }

          const setPED = function() {
            return sesv2.createConfigurationSetEventDestination({
              ConfigurationSetName: p.CONFIG_SET_NAME,
              EventDestination: {
                Enabled: true ,
                MatchingEventTypes: [
                  'SEND','REJECT','BOUNCE','COMPLAINT','DELIVERY','OPEN','CLICK','RENDERING_FAILURE'
                ],
                PinpointDestination: {ApplicationArn: p.PINPOINT_PROJECT_ARN}
              },
              EventDestinationName: 'pinpoint'
            }).promise();
          }

          exports.handler = (event, context, callback) => {
            if (event.ResourceProperties.CustomResourceAction === 'SetupSampleFiles') {
              return Promise.all([
                    rnq([p.ALL_EVENT_TABLE, p.SEND_NQ, p.HARD_BOUNCE_NQ, p.SOFT_BOUNCE_NQ, p.COMPLAINT_NQ,
                        p.DELIVERY_NQ, p.OPEN_NQ, p.CLICK_NQ, p.UNSUB_NQ, p.REJECT_NQ, p.SMS_BUFF_NQ,
                        p.SMS_SUCCESS_NQ, p.CAMPAIGN_SEND_NQ, p.JOURNEY_SEND_NQ]),
                    setPED()
                ])
                .then((results) => {
                  return sendResponse(event, callback, context.logStreamName, 'SUCCESS', {success: true});
                })
                .catch((results) => {
                  return sendResponse(event, callback, context.logStreamName, 'FAILED', {success: false});
                });
            }
          };

          /**
          * Sends a response to the pre-signed S3 URL
          */
          let sendResponse = function(event, callback, logStreamName, responseStatus, responseData) {
            return new Promise((resolve, reject) => {
              try {
                const responseBody = JSON.stringify({
                    Status: responseStatus,
                    Reason: `See the details in CloudWatch Log Stream: ${logStreamName}`,
                    PhysicalResourceId: logStreamName,
                    StackId: event.StackId,
                    RequestId: event.RequestId,
                    LogicalResourceId: event.LogicalResourceId,
                    Data: responseData,
                });
                const parsedUrl = url.parse(event.ResponseURL);
                const options = {
                    hostname: parsedUrl.hostname,
                    port: 443,
                    path: parsedUrl.path,
                    method: 'PUT',
                    headers: {
                        'Content-Type': '',
                        'Content-Length': responseBody.length,
                    }
                };
                const req = https.request(options, (res) => {
                    resolve('Successfully sent stack response!');
                });
                req.on('error', (err) => {reject(err);});
                req.write(responseBody);
                req.end();
              } catch(err) {
                reject(err);
              }
            });
          };


  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutDestination
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                  - "s3:CreateBucket"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${DataS3Bucket}"
                  - !Sub "arn:aws:s3:::${DataS3Bucket}/*"
              -
                Effect: "Allow"
                Action:
                  - "athena:StartQueryExecution"
                  - "athena:GetNamedQuery"
                  - "athena:BatchGetNamedQuery"
                Resource: !Sub "arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*"
              -
                Effect: "Allow"
                Action:
                  - "glue:GetDatabase"
                  - "glue:GetDatabases"
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "glue:GetPartition"
                  - "glue:GetPartitions"
                  - "glue:CreateTable"
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${PinpointEventDatabase}/*"
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${PinpointEventDatabase}"
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
              -
                Effect: "Allow"
                Action:
                  - ses:CreateConfigurationSetEventDestination
                  - mobiletargeting:GetApp
                Resource: "*"
